<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://statogale.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://statogale.github.io/" rel="alternate" type="text/html" /><updated>2019-03-31T21:17:11+01:00</updated><id>https://statogale.github.io/</id><title type="html">Statogale</title><subtitle>Statogale is a group of freelancers who specialize in web development and data science. Areas include machine learning, R language, python, javascript, php with laravel5, reactjs, vuejs,sql and lots more.</subtitle><entry><title type="html">python programming - Overview of python datatypes</title><link href="https://statogale.github.io/python/2019/03/19/overview-of-python-datatypes.html" rel="alternate" type="text/html" title="python programming - Overview of python datatypes" /><published>2019-03-19T00:00:00+01:00</published><updated>2019-03-19T00:00:00+01:00</updated><id>https://statogale.github.io/python/2019/03/19/overview-of-python-datatypes</id><content type="html" xml:base="https://statogale.github.io/python/2019/03/19/overview-of-python-datatypes.html">Python datatypes such as numbers, sequences (e.g. strings, lists, tuples), mappings or dictionaries are the building blocks of a python application. This article gives an overview of python's major datatypes. 

**NB: A useful function for determining the type of object is `type()`.**

##### **NUMBERS**

Basically, python numbers includes 

- **integers** or whole numbers which can either be positive or negative e.g. 1, 100, -5 etc. They are created literally e.g. 100 or with the function `int()`. **Note: Boolean datatype, a variant of integer datatype also exists.**

- **float** datatypes or numbers with decimal places e.g. 2.50, -3.142 etc. Floats are also created literally e.g. 1.5 or created with the function `float()`

- **decimal** datatype which is a varaiant of the float datatype that produces &quot;humanly&quot; accurate calculations e.g

{% highlight python %}

        1.1 + 2.2 = 3.3000000000000003  # float datatype

        1.1 + 2.2 equals 3.3   # decimal datatype

        0.1 + 0.1 + 0.1 - 0.3 equals 5.5511151231257827e-017 # float datatype

        0.1 + 0.1 + 0.1 - 0.3 equals 0  # decimal datatype

{% endhighlight python %}

- complex numbers e.g. `3 + 5j`.

Python numerics or numbers except the complex datatype support the usual arithmetic operations such as addition, subtraction etc. s well as logical operations and hence are useful for applications which are monetary or numeric in nature.

##### SEQUENCES

Python sequences which are ordered collections of items includes

- **strings** - set of characters or numbers within single/double/triple quotes. They can be created literally e.g `&quot;Peter Griffin&quot;`
or with the `str()` function

- **lists** -  a python list is a comma-seperated, homogenous/heterogenous set of items within square brackets e.g. `[1, 2, 4, &quot;dog&quot;, &quot;rabbit&quot;]`. They are also created with the `list()` function.

- **tuples** - tuples are like lists but contain items enclosed in parenthesis e.g. `(1, 2, 4, &quot;dog&quot;, &quot;rabbit&quot;)` and also immutable. Don't worry if you don't understand immutability for now. The `tuple()` function creates tuples as well.

Python sequences share common traits such as indexing which is zero-based, sorting, slicing and length.

{% highlight python %}

        list_of_names = [&quot;Peter&quot;, &quot;Lois&quot;, &quot;Meg&quot;, &quot;Chris&quot;, &quot;Brian&quot;, &quot;Stewie&quot;, &quot;Brian&quot;]
                           0         1      2       3        4       5          6
        ## Indexing

        list_of_names[0]  ## &quot;Peter&quot;   ### the first item on this list, sits at index 0
        list_of_names[6]  ## &quot;Brian&quot;   ### the last item on this list, sits at index 6

        name = &quot;Michael Jordan&quot;
                0123456789...     # the indices.

        name[5]   ## &quot;e&quot;   ### letter &quot;e&quot; is found at the 5th index

{% endhighlight python %}  

However, the list datatype differ from string and tuple datatype because it is mutable. this means you can add or remove items from the original list unlike strings and tuples which cannot be modified in place. New strings or new tuples can only be created from the old string or tuple respectively. Sequences especially lists and tuples are great for storing/transfering items while the string is also useful for displaying messages to users of an application

##### **MAPPINGS (Dictionaries)**

Python dictionaries consist of comma-seperated list of key-value pairs with curly braces. They are just like an English dictionary which contains word-meaning pairs. Like the list datatype, the dictionary is mutable but it cannot be sorted or sliced because it does not respect the position of its items i.e. it is unordered.

{% highlight python %}
        # An example of a python dictionary

        some_character = { &quot;name&quot;: &quot;Peter Griffin&quot;, &quot;age&quot;: 1000, &quot;height&quot;: &quot;299m&quot;}

        # Retrieving the name
        some_character[&quot;name&quot;]  ## &quot;Peter Griffin&quot;

{% endhighlight %}

Dictionaries can also be created with the `dict()` function.

##### **OTHERS**

Other datatypes in python includes 

- **Sets** - which is an unordered collection of *unique* items. There are created literally as a set of items in curly braces e.g {1, 3, 5, 6} or with the `set()` function. Like everyday mathematics, set operations e.g. intersections, unions etc. can be performed on python sets. As an example,
{% highlight python %} 

        # assuming we have a list of duplicated items
        list_containing_dups = [1,1,2,2,3,3,4,4,5,5]

        # the set function takes the list and returns a set of unique values
        set(list_containing_dups)  ## {1, 2, 3, 4, 5}

{% endhighlight %} 

- **Enums** - *According to python's official documentation,* an enumeration or `Enum` is a set of symbolic names (members) bound to unique, constant values.  An example will make it clearer.

{% highlight python %}

        from enum import Enum

        class Color(Enum):

            NORTH = 1
            EAST = 2
            SOUTH = 3
            WEST = 4

        ## Color.WEST equals or represents 4

{% endhighlight %}

- **Datetime** - The datetime object object in python consists of datetime properties useful for manipulating dates and times as well as performing for performing date and time arithmetics.

{% highlight python %}

    from datetime import date

    today = date.today()

    print(today)  ## datetime.date(2018, 11, 21)

    print(today.year)  ## 2018
    print(today.month)  ## 11

{% endhighlight %}

##### **CONCLUSION**

This article gave an overview of python datatypes. Next is [python statements, expressions and variables]({% post_url 2019-03-19-overview-of-python-datatypes %}).</content><author><name>mark</name></author><category term="python" /><category term="beginner" /><summary type="html">Python datatypes such as numbers, sequences (e.g. strings, lists, tuples), mappings or dictionaries are the building blocks of a python application. This article gives an overview of pythonâ€™s major datatypes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://statogale.github.io/assets/img/post/python/python-logo-generic.svg" /></entry><entry><title type="html">python programming - Installing python</title><link href="https://statogale.github.io/python/2018/11/15/installing-python.html" rel="alternate" type="text/html" title="python programming - Installing python" /><published>2018-11-15T00:00:00+01:00</published><updated>2018-11-15T00:00:00+01:00</updated><id>https://statogale.github.io/python/2018/11/15/installing-python</id><content type="html" xml:base="https://statogale.github.io/python/2018/11/15/installing-python.html">Installation of python is very easy although it is dependent on the operating system of your device.


To install python, go to &lt;https://www.python.org/downloads/&gt; and select the latest release of the python software based on your operating system. Usually, the download options specific to your operating system are shown first.  This article is second in the introduction to python programming series. The first article that introduces the subject matter can be found [here]({% post_url 2018-10-20-introduction-to-python-programming %}).


##### **Installing python on Windows / MacOs**

Click the orange-colored download button if you want the 32-bit version of the software (e.g. `python-3.7.1.exe`) else scroll down a bit and click on a specific release e.g. `python-3.7.1`. This should take you the page where you can select the 64 bit version of the software. This should be python-3.7.1.`amd64`.exe for example. (*note the **amd64***)


Upon clicking the python executable or .exe file, you should get a prompt as shown below:

  ![start prompt for python installation](/assets/img/post/python/installing/start.png)



**Make sure you check the &quot;add python to path&quot; option as shown above.** This enables you run the python interpreter from the commandline anywhere on your device. Also it makes it easier for other softwares which require python to find the python program.

Then click `install now` or click `customize installation` if you want specific features (both optional and advanced) as well as the ability to choose the location of installation. If you are a beginner, click `install now`. Note that you can make further modifications after installing python by clicking the installer. After a successful installation, you should see this.

 ![python successful installation image](/assets/img/post/python/installing/success.png)

After installation, open the commandline on your device (shift + right-click) and type `python` or `py` or `python3`. This should launch the python interpreter. 

 ![python interpreter from the commandline](/assets/img/post/python/installing/interpreter.png)


On windows only: `py -0` to produce a list of the installed pythons, with default marked with an asterisk. Running `py -0p` will include the paths. If py is run with a version specifier that cannot be matched it will also print the short form list of available specifiers (excerpt from python 3.7 changelog)

Along with the python interpreter, other files associated with the python installation includes 

- the python manual/documentation (a must-have great place to learn python)

- the default python shell called IDLE

- the python module documentation 

    click on this to open the module docs in your device's default web browser. There you can assess information on python functions available in the modules

- python text editor - not so fancy like `jetbrains pycharm` but can be useful in certain cases.


##### **Installation on other operating systems**

Installation on mac follows a similar process as explained above. On linux, python is installed by default. If you'd like to install a different version then run 

1. sudo apt-get update

2. sudo apt-get install python-`version`

##### **When you can't run python from the commandline**

If you do get the above message, do the following.

- verify that the python software was properly installed; type `python.exe` in the search bar of your device. If found right-click and open folder location. You should see python.exe among other files.

- if python.exe is available, most likely python wasn't added to the path variable during installation. The easiest way to solve this problem is to click on the python installer (the file you downloaded) and choose the modify option. Then click next. Make sure the `add python to environment variables` option is checked and you are good to go.

 ![modifying python installation](/assets/img/post/python/installing/modify.png)


 ![ensuring that the add python to path variable is checked](/assets/img/post/python/installing/modify2.png)


##### **Conclusion.**

As you make progress in the understanding and use of the python programming language, the ability to use python efficiently from the commandline is one skill you should possess especially if you want to be a system administrator or a devOps engineer. As a beginner you don't have much to worry about...for now. If you have not installed an [IDE]({% post_url 2019-03-19-installing-a-python-ide %})
Let's take a look at python's [datatypes]({% post_url 2019-03-19-overview-of-python-datatypes %}) which is very essential for the creation of applications with python.</content><author><name>mark</name></author><category term="python" /><category term="beginner" /><summary type="html">Installation of python is very easy although it is dependent on the operating system of your device.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://statogale.github.io/assets/img/post/python/python-logo-generic.svg" /></entry><entry><title type="html">python programming - introduction</title><link href="https://statogale.github.io/python/2018/10/20/introduction-to-python-programming.html" rel="alternate" type="text/html" title="python programming - introduction" /><published>2018-10-20T00:00:00+01:00</published><updated>2018-10-20T00:00:00+01:00</updated><id>https://statogale.github.io/python/2018/10/20/introduction-to-python-programming</id><content type="html" xml:base="https://statogale.github.io/python/2018/10/20/introduction-to-python-programming.html">Python is a `general-purpose` high-level programming language, useful in the creation of both small, medium and large scale mobile, web and desktop applications.

-  It was created by Guido van Rossum and first released in 1991. [Link](https://en.wikipedia.org/wiki/Python_(programming_language)).

Python comes in different flavours including but not limited to:

- [Cython](https://www.python.org/downloads/release/python-367/) which is the most popular and officially supported by the [PSF](https://www.python.org/psf/)
- [Jython](http://www.jython.org/)
- [Iron python](http://ironpython.net/)
- [Winpython](https://winpython.github.io/)
- etc.


##### FEATURES OF PYTHON

Here's why you would want to learn python programming.

- **Python is easy, concise / readable.**
 
 {% highlight python %}
     
        name = &quot;Peter Griffin&quot;
        number = 5
        
        print(&quot;Hello&quot;)
        # note the absence of semicolons `
       
 {% endhighlight %}       

- this is the equivalent C++ code (*which is the beginning of all difficulties... C++ is great but not as a first language in my opinion*)  

       {% highlight c++ %}

        #include &lt;iostream&gt;
        
        using namespace std;
        
        int main(){
           
           string name = &quot;Peter Griffin&quot;;
           int number = 5;
           
           cout &lt;&lt; &quot;Hello&quot; &lt;&lt; endl;
           
           return 0;
        }
       {% endhighlight %}

- [it is an interpreted language](https://en.wikipedia.org/wiki/Interpreter_(computing)). 

This implies that the immediate result(s) of code written is executed line by line without an initial compilation into a machine-readable format (e.g binaries or zeros and ones) by a [compiler](https://en.wikipedia.org/wiki/Compiler)

- **automatic memory management (unlike C++).** 

When objects (e.g. strings, numbers, lists) are created they are stored in memory of your machine or device. Python helps with cleaning or removal of these objects after the program is ran to completion. While in some programming languages e.g C/C++ , the memory used by the created object as has to freed or reallocated by the programmer.

- dynamically typed (you don't have to declare variable / function return types like in C, java, C++ etc..).

      {% highlight python %}

       name = &quot;Peter Griffin&quot; (python) 
       # the interpreter automatic knows that the variable name is / holds a string.

       string name = &quot;Peter Griffin&quot;; (Java, C++) 
       # you must tell the compiler the type of variable. In this case, a string also.

    {% endhighlight %}

- **Supports different programming practices (procedural, object oriented, functional)**  

- **versatile use (web, ML, embedded, big companies)**

- **scalable (small and large applications can be created)**

- [popular](https://stackoverflow.blog/2017/09/06/incredible-growth-python/). Python is among the fastest growing programming languages.



##### USES OF PYTHON

 Some of the uses of Python includes (You'll love this!):

- Desktop applications (e.g. an example is [Inkscape](https://inkscape.org/), a free computer graphics application).

   [Wxpython](https://wxpython.org/), an implementation of [wxWidgets](https://www.wxwidgets.org/) is a popular tool for creating graphical user interfaces (GUI).

- Artificial intelligence / Machine Learning as well as Data analysis (via the [sciPy packages](https://www.scipy.org/))

- DevOps / System administration / Writing automation scripts

- Educational purposes (great for introducing programming concepts, since it is easy)

- Embedded development (This is the use of python within a programming language such as C / Java etc.)

- Game development (check out [pygame](https://www.pygame.org/) , a tool for game development)

- Mobile development(e.g. with [kivy](https://kivy.org/))

- Multimedia applications development

- Network programming

- Programming of web parsers / scrapers / crawlers

- Software prototyping

- Software testing / Writing automated tests

- Web development ([Django](https://www.djangoproject.com/) web development framework, [Flask](http://flask.pocoo.org/) microframework)

##### CONCLUSION

python is a great piece of software that you should consider learning or mastering because there are many possibilities
or opportunities available to a python programmer. Next let's [install]({% post_url 2018-11-15-installing-python %}) the python software.</content><author><name>mark</name></author><category term="python" /><category term="beginner" /><summary type="html">Python is a general-purpose high-level programming language, useful in the creation of both small, medium and large scale mobile, web and desktop applications.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://statogale.github.io/assets/img/post/python/python-logo-generic.svg" /></entry></feed>